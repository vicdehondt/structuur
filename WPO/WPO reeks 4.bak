(define (product factor a next b)
  (if (> a b)
      1
      (* (factor a) (product factor (next a) next b))))

(define (iter-product factor a next b)
  (define (iter factor a next b count result)
    (if (< count 0)
        result
        (iter factor (next a) next b (- count 1) (* (factor a) result))))
  (iter factor a next b (- b a) 1))
; assistent:
;(define (iter-product factor a next b)
;  (define (iter i result)
;    (if (> i b)
;        result
;        (iter (next i) (* (factor i) result))))
;  (iter a 1))

(define (id x) x)

(define (factorial n)
  (product id 1 (lambda (x) (+ x 1)) n))

(define (do-n f n)
  (define (iter counter)
    (if (= counter n)
        (display "")
        (begin
          (f)
          (iter (+ counter 1)))))
  (iter 0))

(define (accumulate combiner null-value term a next b)
  (define (iter )))